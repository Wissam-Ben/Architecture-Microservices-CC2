/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.Api;
import io.swagger.model.Error;
import io.swagger.model.Payment;
import io.swagger.model.PaymentProcess;
import io.swagger.model.Payments;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-05-31T12:37:02.602Z[GMT]")
@Validated
@Api(value = "v1")
@RequestMapping("/v1")
public interface PaymentsApi {

    @Operation(summary = "", description = "Fetch all payments", tags={ "payments" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Request Succeeded", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Payments.class))),

            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),

            @ApiResponse(responseCode = "500", description = "Unexpected Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/payments",
            produces = { "application/json" },
            method = RequestMethod.GET)
    List<Payment> getPayments();


    @Operation(summary = "", description = "Fetch payments", tags={ "payments" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Request Succeeded", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Payment.class))),

            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),

            @ApiResponse(responseCode = "500", description = "Unexpected Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/payments/{paymentId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Payment> getPaymentById(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("paymentId") String paymentId);


    @Operation(summary = "", description = "Process a payment", tags={ "payments" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Request Succeeded", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Payment.class))),

            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),

            @ApiResponse(responseCode = "500", description = "Unexpected Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/payments",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Payment> processPayment(@RequestBody Payment payment);

}

